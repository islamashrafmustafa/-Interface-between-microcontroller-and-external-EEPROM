
interface  MC and EEPROM via I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a7  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  00001b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bae  00000000  00000000  000023c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000593  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bbe  00000000  00000000  0000372f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000042ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 01 	call	0x326	; 0x326 <main>
  64:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vsetPINDir>:
		case 'C':
		PORTC&=0xf0;
		PORTC|=value;
		case 'D':
		PORTD&=0xf0;
		PORTD|=value;
  6c:	82 34       	cpi	r24, 0x42	; 66
  6e:	19 f1       	breq	.+70     	; 0xb6 <DIO_vsetPINDir+0x4a>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_vsetPINDir+0xc>
  72:	81 34       	cpi	r24, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_vsetPINDir+0x18>
  76:	08 95       	ret
  78:	83 34       	cpi	r24, 0x43	; 67
  7a:	b1 f1       	breq	.+108    	; 0xe8 <DIO_vsetPINDir+0x7c>
  7c:	84 34       	cpi	r24, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_vsetPINDir+0x16>
  80:	4c c0       	rjmp	.+152    	; 0x11a <DIO_vsetPINDir+0xae>
  82:	08 95       	ret
  84:	41 30       	cpi	r20, 0x01	; 1
  86:	59 f4       	brne	.+22     	; 0x9e <DIO_vsetPINDir+0x32>
  88:	2a b3       	in	r18, 0x1a	; 26
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_vsetPINDir+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_vsetPINDir+0x24>
  98:	82 2b       	or	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_vsetPINDir+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_vsetPINDir+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_vsetPINDir+0x64>
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_vsetPINDir+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_vsetPINDir+0x56>
  ca:	82 2b       	or	r24, r18
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	08 95       	ret
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x70>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x6c>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_vsetPINDir+0x96>
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDir+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDir+0x88>
  fc:	82 2b       	or	r24, r18
  fe:	84 bb       	out	0x14, r24	; 20
 100:	08 95       	ret
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vsetPINDir+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vsetPINDir+0x9e>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_vsetPINDir+0xc8>
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_vsetPINDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_vsetPINDir+0xba>
 12e:	82 2b       	or	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDir+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDir+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <DIO_write>:
 14c:	82 34       	cpi	r24, 0x42	; 66
 14e:	19 f1       	breq	.+70     	; 0x196 <DIO_write+0x4a>
 150:	18 f4       	brcc	.+6      	; 0x158 <DIO_write+0xc>
 152:	81 34       	cpi	r24, 0x41	; 65
 154:	39 f0       	breq	.+14     	; 0x164 <DIO_write+0x18>
 156:	08 95       	ret
 158:	83 34       	cpi	r24, 0x43	; 67
 15a:	b1 f1       	breq	.+108    	; 0x1c8 <DIO_write+0x7c>
 15c:	84 34       	cpi	r24, 0x44	; 68
 15e:	09 f4       	brne	.+2      	; 0x162 <DIO_write+0x16>
 160:	4c c0       	rjmp	.+152    	; 0x1fa <DIO_write+0xae>
 162:	08 95       	ret
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	59 f4       	brne	.+22     	; 0x17e <DIO_write+0x32>
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_write+0x28>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_write+0x24>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_write+0x3e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_write+0x3a>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	59 f4       	brne	.+22     	; 0x1b0 <DIO_write+0x64>
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_write+0x5a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_write+0x56>
 1aa:	82 2b       	or	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write+0x70>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write+0x6c>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <DIO_write+0x96>
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_write+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_write+0x88>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	08 95       	ret
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0xa2>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x9e>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_write+0xc8>
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_write+0xbe>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_write+0xba>
 20e:	82 2b       	or	r24, r18
 210:	82 bb       	out	0x12, r24	; 18
 212:	08 95       	ret
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 22c:	62 95       	swap	r22
 22e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 230:	82 34       	cpi	r24, 0x42	; 66
 232:	79 f0       	breq	.+30     	; 0x252 <write_high_nibble+0x26>
 234:	18 f4       	brcc	.+6      	; 0x23c <write_high_nibble+0x10>
 236:	81 34       	cpi	r24, 0x41	; 65
 238:	31 f0       	breq	.+12     	; 0x246 <write_high_nibble+0x1a>
 23a:	08 95       	ret
 23c:	83 34       	cpi	r24, 0x43	; 67
 23e:	79 f0       	breq	.+30     	; 0x25e <write_high_nibble+0x32>
 240:	84 34       	cpi	r24, 0x44	; 68
 242:	99 f0       	breq	.+38     	; 0x26a <write_high_nibble+0x3e>
 244:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 24c:	8b b3       	in	r24, 0x1b	; 27
 24e:	86 2b       	or	r24, r22
 250:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 252:	88 b3       	in	r24, 0x18	; 24
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	86 2b       	or	r24, r22
 25c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 25e:	85 b3       	in	r24, 0x15	; 21
 260:	8f 70       	andi	r24, 0x0F	; 15
 262:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 264:	85 b3       	in	r24, 0x15	; 21
 266:	86 2b       	or	r24, r22
 268:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 26a:	82 b3       	in	r24, 0x12	; 18
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 270:	82 b3       	in	r24, 0x12	; 18
 272:	68 2b       	or	r22, r24
 274:	62 bb       	out	0x12, r22	; 18
 276:	08 95       	ret

00000278 <I2C_Master_init>:
	#include <avr/io.h>
	#include "std_macros.h"
	#define F_CPU 8000000UL
	#define prescalar 1
	void I2C_Master_init(unsigned long SCL_Clock)
	{
 278:	9b 01       	movw	r18, r22
 27a:	ac 01       	movw	r20, r24
		TWBR= (unsigned char) (((F_CPU/SCL_Clock)-16) / (2*prescalar));
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	72 e1       	ldi	r23, 0x12	; 18
 280:	8a e7       	ldi	r24, 0x7A	; 122
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 8a 02 	call	0x514	; 0x514 <__udivmodsi4>
 288:	da 01       	movw	r26, r20
 28a:	c9 01       	movw	r24, r18
 28c:	40 97       	sbiw	r24, 0x10	; 16
 28e:	a1 09       	sbc	r26, r1
 290:	b1 09       	sbc	r27, r1
 292:	b6 95       	lsr	r27
 294:	a7 95       	ror	r26
 296:	97 95       	ror	r25
 298:	87 95       	ror	r24
 29a:	80 b9       	out	0x00, r24	; 0
		if (prescalar==1)
		{
			TWSR=0;
 29c:	11 b8       	out	0x01, r1	; 1
 29e:	08 95       	ret

000002a0 <I2C_start>:
		
	}
	
	void I2C_start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
 2a0:	84 ea       	ldi	r24, 0xA4	; 164
 2a2:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
 2a4:	06 b6       	in	r0, 0x36	; 54
 2a6:	07 fe       	sbrs	r0, 7
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <I2C_start+0x4>
		while ((TWSR & 0XF8) != 0x08); // start condition has been transmitted
 2aa:	81 b1       	in	r24, 0x01	; 1
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <I2C_start+0xa>
	}
 2b2:	08 95       	ret

000002b4 <I2C_repeated_start>:
	
	void I2C_repeated_start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
 2b4:	84 ea       	ldi	r24, 0xA4	; 164
 2b6:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 2b8:	06 b6       	in	r0, 0x36	; 54
 2ba:	07 fe       	sbrs	r0, 7
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <I2C_repeated_start+0x4>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
 2be:	81 b1       	in	r24, 0x01	; 1
 2c0:	88 7f       	andi	r24, 0xF8	; 248
 2c2:	80 31       	cpi	r24, 0x10	; 16
 2c4:	e1 f7       	brne	.-8      	; 0x2be <I2C_repeated_start+0xa>
	}
 2c6:	08 95       	ret

000002c8 <I2C_write_address>:
	
	void I2C_write_address(unsigned char address)
	{
		TWDR=address;
 2c8:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 2ca:	84 e8       	ldi	r24, 0x84	; 132
 2cc:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
 2ce:	06 b6       	in	r0, 0x36	; 54
 2d0:	07 fe       	sbrs	r0, 7
 2d2:	fd cf       	rjmp	.-6      	; 0x2ce <I2C_write_address+0x6>
		while ((TWSR & 0XF8) != 0x18); // SLA+write has been transmitted and ACK has been received 
 2d4:	81 b1       	in	r24, 0x01	; 1
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	88 31       	cpi	r24, 0x18	; 24
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <I2C_write_address+0xc>
	}
 2dc:	08 95       	ret

000002de <I2C_write_address_and_read>:
	
	void I2C_write_address_and_read(unsigned char address)
	{
		TWDR=address;
 2de:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 2e0:	84 e8       	ldi	r24, 0x84	; 132
 2e2:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 2e4:	06 b6       	in	r0, 0x36	; 54
 2e6:	07 fe       	sbrs	r0, 7
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <I2C_write_address_and_read+0x6>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
 2ea:	81 b1       	in	r24, 0x01	; 1
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	80 34       	cpi	r24, 0x40	; 64
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <I2C_write_address_and_read+0xc>
	}
 2f2:	08 95       	ret

000002f4 <I2C_write_data>:
	void I2C_write_data(unsigned char data)
	{
		TWDR=data;
 2f4:	83 b9       	out	0x03, r24	; 3
		TWCR=(1<<TWINT)|(1<<TWEN);
 2f6:	84 e8       	ldi	r24, 0x84	; 132
 2f8:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
 2fa:	06 b6       	in	r0, 0x36	; 54
 2fc:	07 fe       	sbrs	r0, 7
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <I2C_write_data+0x6>
		while ((TWSR & 0XF8) != 0x28); // data has been transmitted and ACK has been received
 300:	81 b1       	in	r24, 0x01	; 1
 302:	88 7f       	andi	r24, 0xF8	; 248
 304:	88 32       	cpi	r24, 0x28	; 40
 306:	e1 f7       	brne	.-8      	; 0x300 <I2C_write_data+0xc>
	}
 308:	08 95       	ret

0000030a <I2C_stop>:
	
	void I2C_stop(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 30a:	84 e9       	ldi	r24, 0x94	; 148
 30c:	86 bf       	out	0x36, r24	; 54
 30e:	08 95       	ret

00000310 <I2C_read_with_NACK>:
	}
	
	unsigned char I2C_read_with_NACK(void)
	{
		TWCR=(1<<TWINT)|(1<<TWEN);
 310:	84 e8       	ldi	r24, 0x84	; 132
 312:	86 bf       	out	0x36, r24	; 54
		while(READ_BIT(TWCR,TWINT)==0);
 314:	06 b6       	in	r0, 0x36	; 54
 316:	07 fe       	sbrs	r0, 7
 318:	fd cf       	rjmp	.-6      	; 0x314 <I2C_read_with_NACK+0x4>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
 31a:	81 b1       	in	r24, 0x01	; 1
 31c:	88 7f       	andi	r24, 0xF8	; 248
 31e:	88 35       	cpi	r24, 0x58	; 88
 320:	e1 f7       	brne	.-8      	; 0x31a <I2C_read_with_NACK+0xa>
		return TWDR ;
 322:	83 b1       	in	r24, 0x03	; 3
	}
 324:	08 95       	ret

00000326 <main>:
#include <util/delay.h>
#include "I2C.h"
#include "LCD.h"
int main(void)
{
	LCD_vInit();
 326:	0e 94 09 02 	call	0x412	; 0x412 <LCD_vInit>
	unsigned char x;
	/*write to the location 0b00000000000*/
	unsigned char counter=0;
	I2C_Master_init(50000);
 32a:	60 e5       	ldi	r22, 0x50	; 80
 32c:	73 ec       	ldi	r23, 0xC3	; 195
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 3c 01 	call	0x278	; 0x278 <I2C_Master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x16>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x20>
 346:	00 00       	nop
	_delay_ms(500);
	I2C_start(); // transmit start condition
 348:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_write_data>
	I2C_write_data(0x32); // transmit data
 358:	82 e3       	ldi	r24, 0x32	; 50
 35a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_write_data>
	I2C_stop(); // transmit stop condition
 35e:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_stop>
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	81 ee       	ldi	r24, 0xE1	; 225
 366:	94 e0       	ldi	r25, 0x04	; 4
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x42>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x4c>
 372:	00 00       	nop
	
	/*read from the location 0b00000000000*/
	_delay_ms(200);
	I2C_start(); // transmit start condition
 374:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
 378:	80 ea       	ldi	r24, 0xA0	; 160
 37a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_write_data>
	I2C_repeated_start(); // transmit repeated start condition
 384:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_repeated_start>
	I2C_write_address_and_read(0b10100001); // transmit device address and read
 388:	81 ea       	ldi	r24, 0xA1	; 161
 38a:	0e 94 6f 01 	call	0x2de	; 0x2de <I2C_write_address_and_read>
	x=I2C_read_with_NACK();
 38e:	0e 94 88 01 	call	0x310	; 0x310 <I2C_read_with_NACK>
 392:	c8 2f       	mov	r28, r24
	I2C_stop();
 394:	0e 94 85 01 	call	0x30a	; 0x30a <I2C_stop>
	LCD_vSend_char(x);
 398:	8c 2f       	mov	r24, r28
 39a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_vSend_char>
 39e:	ff cf       	rjmp	.-2      	; 0x39e <main+0x78>

000003a0 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	82 e4       	ldi	r24, 0x42	; 66
 3a6:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
 3aa:	8f e9       	ldi	r24, 0x9F	; 159
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <send_falling_edge+0xe>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <send_falling_edge+0x14>
 3b4:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	82 e4       	ldi	r24, 0x42	; 66
 3bc:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <send_falling_edge+0x24>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <send_falling_edge+0x2a>
 3ca:	00 00       	nop
 3cc:	08 95       	ret

000003ce <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
 3ce:	cf 93       	push	r28
 3d0:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
 3d2:	68 2f       	mov	r22, r24
 3d4:	62 95       	swap	r22
 3d6:	6f 70       	andi	r22, 0x0F	; 15
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	0e 94 16 01 	call	0x22c	; 0x22c <write_high_nibble>
	DIO_write('B',RS,0);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
	send_falling_edge();
 3e8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_falling_edge>
	write_high_nibble('A',cmd);
 3ec:	6c 2f       	mov	r22, r28
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 16 01 	call	0x22c	; 0x22c <write_high_nibble>
	DIO_write('B',RS,0);
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	82 e4       	ldi	r24, 0x42	; 66
 3fa:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
	send_falling_edge();
 3fe:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_falling_edge>
 402:	8f ec       	ldi	r24, 0xCF	; 207
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	#endif
	_delay_ms(1);
}
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_vInit>:
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	81 ee       	ldi	r24, 0xE1	; 225
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <LCD_vInit+0x6>
 420:	00 c0       	rjmp	.+0      	; 0x422 <LCD_vInit+0x10>
 422:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	81 e4       	ldi	r24, 0x41	; 65
 42a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	81 e4       	ldi	r24, 0x41	; 65
 434:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	66 e0       	ldi	r22, 0x06	; 6
 43c:	81 e4       	ldi	r24, 0x41	; 65
 43e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	67 e0       	ldi	r22, 0x07	; 7
 446:	81 e4       	ldi	r24, 0x41	; 65
 448:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	82 e4       	ldi	r24, 0x42	; 66
 452:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	82 e4       	ldi	r24, 0x42	; 66
 45c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	82 e4       	ldi	r24, 0x42	; 66
 466:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	82 e4       	ldi	r24, 0x42	; 66
 470:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_cmd>
 47a:	8f e1       	ldi	r24, 0x1F	; 31
 47c:	9e e4       	ldi	r25, 0x4E	; 78
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_vInit+0x6c>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_vInit+0x72>
 484:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 486:	88 e2       	ldi	r24, 0x28	; 40
 488:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_cmd>
 48c:	8f ec       	ldi	r24, 0xCF	; 207
 48e:	97 e0       	ldi	r25, 0x07	; 7
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <LCD_vInit+0x7e>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_vInit+0x84>
 496:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 498:	8e e0       	ldi	r24, 0x0E	; 14
 49a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_cmd>
 49e:	8f ec       	ldi	r24, 0xCF	; 207
 4a0:	97 e0       	ldi	r25, 0x07	; 7
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_vInit+0x90>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_vInit+0x96>
 4a8:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_cmd>
 4b0:	8f e1       	ldi	r24, 0x1F	; 31
 4b2:	9e e4       	ldi	r25, 0x4E	; 78
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_vInit+0xa2>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_vInit+0xa8>
 4ba:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_cmd>
 4c2:	8f ec       	ldi	r24, 0xCF	; 207
 4c4:	97 e0       	ldi	r25, 0x07	; 7
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_vInit+0xb4>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_vInit+0xba>
 4cc:	00 00       	nop
 4ce:	08 95       	ret

000004d0 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 4d0:	cf 93       	push	r28
 4d2:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
 4d4:	68 2f       	mov	r22, r24
 4d6:	62 95       	swap	r22
 4d8:	6f 70       	andi	r22, 0x0F	; 15
 4da:	81 e4       	ldi	r24, 0x41	; 65
 4dc:	0e 94 16 01 	call	0x22c	; 0x22c <write_high_nibble>
	DIO_write('B',RS,1);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	82 e4       	ldi	r24, 0x42	; 66
 4e6:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
	send_falling_edge();
 4ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_falling_edge>
	write_high_nibble('A',data);
 4ee:	6c 2f       	mov	r22, r28
 4f0:	81 e4       	ldi	r24, 0x41	; 65
 4f2:	0e 94 16 01 	call	0x22c	; 0x22c <write_high_nibble>
	DIO_write('B',RS,1);
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_write>
	send_falling_edge();
 500:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_falling_edge>
 504:	8f ec       	ldi	r24, 0xCF	; 207
 506:	97 e0       	ldi	r25, 0x07	; 7
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <LCD_vSend_char+0x38>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <LCD_vSend_char+0x3e>
 50e:	00 00       	nop
	#endif
	_delay_ms(1);
}
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <__udivmodsi4>:
 514:	a1 e2       	ldi	r26, 0x21	; 33
 516:	1a 2e       	mov	r1, r26
 518:	aa 1b       	sub	r26, r26
 51a:	bb 1b       	sub	r27, r27
 51c:	fd 01       	movw	r30, r26
 51e:	0d c0       	rjmp	.+26     	; 0x53a <__udivmodsi4_ep>

00000520 <__udivmodsi4_loop>:
 520:	aa 1f       	adc	r26, r26
 522:	bb 1f       	adc	r27, r27
 524:	ee 1f       	adc	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	a2 17       	cp	r26, r18
 52a:	b3 07       	cpc	r27, r19
 52c:	e4 07       	cpc	r30, r20
 52e:	f5 07       	cpc	r31, r21
 530:	20 f0       	brcs	.+8      	; 0x53a <__udivmodsi4_ep>
 532:	a2 1b       	sub	r26, r18
 534:	b3 0b       	sbc	r27, r19
 536:	e4 0b       	sbc	r30, r20
 538:	f5 0b       	sbc	r31, r21

0000053a <__udivmodsi4_ep>:
 53a:	66 1f       	adc	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	1a 94       	dec	r1
 544:	69 f7       	brne	.-38     	; 0x520 <__udivmodsi4_loop>
 546:	60 95       	com	r22
 548:	70 95       	com	r23
 54a:	80 95       	com	r24
 54c:	90 95       	com	r25
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	bd 01       	movw	r22, r26
 554:	cf 01       	movw	r24, r30
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
